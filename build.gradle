buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        //classpath "com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}
plugins {
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.18-0.1.0.0'
group = 'io.github.lightman314.lightmansconsole' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'lightmansdiscord'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: '1.18'

    runs {
    
        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                lightmansdiscord {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//ShadowJar
configurations {
    embed
    compileOnly.extendsFrom(embed)
}
task release{

}
reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

shadowJar {
    classifier = 'server'
    configurations = [project.configurations.embed]
    relocate 'org.slf4j', 'ldishadow.org.slf4j'
    relocate 'okhttp3', 'ldishadow.okhttp'
    relocate 'okio', 'ldishadow.okio'
    relocate 'club.minnced', 'ldishadow.club.minnced'
    relocate 'com.sun', 'ldishadow.com.sun'
    relocate 'com.iwebpp', 'ldishadow.com.iwebpp'
    relocate 'com.google.gson', 'ldishadow.com.google.gson'
    relocate 'com.neovisionaries', 'ldishadow.com.neovisionaries'
    relocate 'gnu', 'ldishadow.gnu'
    relocate 'org.apache.commons.collections4', 'ldishadow.org.apache.commons.collections4'
    relocate 'org.json', 'ldishadow.org.json'
    relocate 'org.intellij', 'ldishadow.org.intellij'
    relocate 'org.jetbrains', 'ldishadow.org.jetbrains'
    relocate 'tomp2p', 'ldishadow.tomp2p'
    relocate 'com.fasterxml', 'ldishadow.com.fasterxml'
    relocate 'dev.vankka', 'ldishadow.dev.vankka'
    relocate 'net.kyori', 'ldishadow.net.kyori'
    relocate 'org.checkerframework', 'ldishadow.org.checkerframework'
    relocate "com.moandjiezana", "ldishadow.com.moandjiezana"
    relocate "ch.lambdaj", "ldishadow.ch.lambdaj"
    relocate "emoji4j", "ldishadow.emoji4j"
    relocate "javax.annotation", "ldishadow.javax.annotation"
    relocate "net.sf", "ldishadow.net.sf"
    relocate "org.hamcrest", "ldishadow.org.hamcrest"
    relocate "org.objenesis", "ldishadow.org.objenesis"
    relocate "kotlin", "ldishadow.kotlin"
    relocate "com.vdurmont", "ldishadow.com.vdurmont"
}

artifacts {
    archives tasks.shadowJar
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.1-39.0.0'

	//Discord libraries
    embed("net.dv8tion:JDA:5.0.0-alpha.22") {
        exclude group: 'okhttp3', module: "okhttp"
    }
    
    compileOnly("curse.maven:vanishmod-423535:3871872")
	
}

tasks.build.dependsOn(tasks.shadowJar)



// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "lightmansdiscord",
            "Specification-Vendor": "lightman314",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"lightman314",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//build.dependsOn('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

