plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

tasks.named('jarJar') {
    archiveClassifier = "server"
}

minecraft {

    mappings channel: mapping_channel, version: mapping_version

    runs {

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //VanishMod compat
    compileOnly("curse.maven:vanishmod-423535:4610970")

    //Discord libraries
    implementation jarJar(group: "net.dv8tion", name:"JDA", version: "[5.0.0-beta.12,)")
    jarJar(group: "org.apache.commons", name: "commons-collections4", version: "[4.4,)") { jarJar.pin(it,"4.4") }
    jarJar(group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: "[2.14.1,)") { jarJar.pin(it, "2.14.1") }
    jarJar(group: "com.fasterxml.jackson.core", name: "jackson-core", version: "[2.14.1,)") { jarJar.pin(it, "2.14.1") }
    jarJar(group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "[2.14.1,)") { jarJar.pin(it, "2.14.1") }
    //jarJar(group: "net.java.dev.jna", name:"jna", version: "[5.12.1,)") { jarJar.pin(it,"5.12.1") }
    jarJar(group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: "[1.6.20,)") { jarJar.pin(it,"1.6.20") }
    jarJar(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-common", version: "[1.6.20,)") { jarJar.pin(it,"1.6.20") }
    jarJar(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: "[1.5.31,)") { jarJar.pin(it,"1.5.31") }
    jarJar(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "[1.5.31,)") { jarJar.pin(it,"1.5.31") }
    jarJar(group: "com.neovisionaries", name: "nv-websocket-client", version: "[2.14,)") { jarJar.pin(it,"2.14") }
    jarJar(group: "com.squareup.okhttp3", name: "okhttp", version: "[4.10.0,)") { jarJar.pin(it,"4.10.0") }
    jarJar(group: "com.squareup.okio", name: "okio-jvm", version: "[3.0.0,)") { jarJar.pin(it,"3.0.0") }
    //jarJar(group: "club.minnced", name: "opus-java", version: "[1.1.1,)") { jarJar.pin(it,"1.1.1") } //Jar is empty, so ignoring this one
    jarJar(group: "club.minnced", name: "opus-java-api", version: "[1.1.1,)") { jarJar.pin(it,"1.1.1") }
    jarJar(group: "club.minnced", name: "opus-java-natives", version: "[1.1.1,)") { jarJar.pin(it,"1.1.1") }
    //jarJar(group: "org.slf4j", name: "slf4j-api", version: "[2.0.1,)") { jarJar.pin(it,"2.0.1") }
    jarJar(group: "net.sf.trove4j", name: "trove4j", version: "[3.0.3,)") { jarJar.pin(it,"3.0.3") }

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//build.dependsOn('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

