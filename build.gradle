plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: mapping_channel, version: mapping_version

    runs {

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//ShadowJar
configurations {
    embed
    compileOnly.extendsFrom(embed)
}
task release{

}
reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

shadowJar {
    archiveClassifier = 'server'
    configurations = [project.configurations.embed]
    relocate 'org.slf4j', 'ldishadow.org.slf4j'
    relocate 'okhttp3', 'ldishadow.okhttp'
    relocate 'okio', 'ldishadow.okio'
    relocate 'club.minnced', 'ldishadow.club.minnced'
    relocate 'com.sun', 'ldishadow.com.sun'
    relocate 'com.iwebpp', 'ldishadow.com.iwebpp'
    relocate 'com.google.gson', 'ldishadow.com.google.gson'
    relocate 'com.neovisionaries', 'ldishadow.com.neovisionaries'
    relocate 'gnu', 'ldishadow.gnu'
    relocate 'org.apache.commons.collections4', 'ldishadow.org.apache.commons.collections4'
    relocate 'org.json', 'ldishadow.org.json'
    relocate 'org.intellij', 'ldishadow.org.intellij'
    relocate 'org.jetbrains', 'ldishadow.org.jetbrains'
    relocate 'tomp2p', 'ldishadow.tomp2p'
    relocate 'com.fasterxml', 'ldishadow.com.fasterxml'
    relocate 'dev.vankka', 'ldishadow.dev.vankka'
    relocate 'net.kyori', 'ldishadow.net.kyori'
    relocate 'org.checkerframework', 'ldishadow.org.checkerframework'
    relocate "com.moandjiezana", "ldishadow.com.moandjiezana"
    relocate "ch.lambdaj", "ldishadow.ch.lambdaj"
    relocate "emoji4j", "ldishadow.emoji4j"
    relocate "javax.annotation", "ldishadow.javax.annotation"
    relocate "net.sf", "ldishadow.net.sf"
    relocate "org.hamcrest", "ldishadow.org.hamcrest"
    relocate "org.objenesis", "ldishadow.org.objenesis"
    relocate "kotlin", "ldishadow.kotlin"
    relocate "com.vdurmont", "ldishadow.com.vdurmont"
}

artifacts {
    archives tasks.shadowJar
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	//Discord libraries
    embed("net.dv8tion:JDA:5.0.0-beta.12") {
        exclude group: 'okhttp3', module: 'okhttp'
    }
    
    compileOnly("curse.maven:vanishmod-423535:4610970")
	
}

tasks.build.dependsOn(tasks.shadowJar)

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//build.dependsOn('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

